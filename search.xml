<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown模板</title>
      <link href="/tangtang.github.io/2022/08/09/markdown%E6%A8%A1%E6%9D%BF/"/>
      <url>/tangtang.github.io/2022/08/09/markdown%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>Ctrl + B</td></tr><tr><td>斜体</td><td>Ctrl + I</td></tr><tr><td>引用</td><td>Ctrl + Q</td></tr><tr><td>插入链接</td><td>Ctrl + L</td></tr><tr><td>插入代码</td><td>Ctrl + K</td></tr><tr><td>插入图片</td><td>Ctrl + G</td></tr><tr><td>提升标题</td><td>Ctrl + H</td></tr><tr><td>有序列表</td><td>Ctrl + O</td></tr><tr><td>无序列表</td><td>Ctrl + U</td></tr><tr><td>横线</td><td>Ctrl + R</td></tr><tr><td>撤销</td><td>Ctrl + Z</td></tr><tr><td>重做</td><td>Ctrl + Y</td></tr></tbody></table><h1 id="标题格式"><a href="#标题格式" class="headerlink" title="标题格式"></a>标题格式</h1><h1 id="主标题"><a href="#主标题" class="headerlink" title="主标题"></a>主标题</h1><h2 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级-标题"><a href="#五级-标题" class="headerlink" title="五级 标题"></a>五级 标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="主标题-1"><a href="#主标题-1" class="headerlink" title="主标题"></a>主标题</h1><h2 id="副标题-1"><a href="#副标题-1" class="headerlink" title="副标题"></a>副标题</h2><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级-标题-1"><a href="#五级-标题-1" class="headerlink" title="五级 标题"></a>五级 标题</h5><h6 id="六级标题’"><a href="#六级标题’" class="headerlink" title="六级标题’"></a>六级标题’</h6><h1 id="列表格式"><a href="#列表格式" class="headerlink" title="列表格式"></a>列表格式</h1><p> 考试排名:</p><ol><li>小红</li><li>小陈</li><li>小李</li></ol><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p><a href="#%E6%A0%87%E9%A2%98">内容</a> #只有一个</p><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><p><em><strong>粗斜体文本</strong></em></p><h1 id="线"><a href="#线" class="headerlink" title="线"></a>线</h1><p>分割线 — 或 ***</p><p><del>删除线</del></p><p><u>下划线</u></p><ul><li>水果</li><li>香蕉</li><li>桃子</li><li>苹果</li></ul><ul><li>水果</li><li>香蕉</li><li>桃子</li><li>苹果</li></ul><ul><li>水果</li><li>香蕉</li><li>桃子</li><li>苹果</li></ul><ul><li>水果<ol><li>香蕉</li><li>桃子</li><li>苹果</li></ol></li><li>蔬菜<ol><li>胡萝卜</li><li>西红柿</li></ol></li></ul><table><thead><tr><th>姓名</th><th align="center">年龄</th><th align="center">成绩</th><th align="center">排名</th></tr></thead><tbody><tr><td>小红</td><td align="center">15</td><td align="center">98</td><td align="center">1</td></tr><tr><td>小强</td><td align="center">12</td><td align="center">88</td><td align="center">2</td></tr><tr><td>小紫</td><td align="center">17</td><td align="center">65</td><td align="center">3</td></tr></tbody></table><p>分割线1</p><hr><p>分割线2</p><hr><p>分割线3</p><hr><p>分割线4</p><hr><p>分割线5</p><hr><p>分割线6</p><hr><p><em>一个人</em><br><em>一个人</em><br> 粗体<br><strong>两个人</strong></p><p><strong>两个人</strong></p><p> 粗斜体<br><em><strong>三个人</strong></em></p><p><em><strong>三个人</strong></em><br> 删除线<br>原价<del>199</del>现价299</p><p>小红:</p><blockquote><p>6点放学</p></blockquote><p>小张:</p><blockquote><p>5.30放学</p></blockquote><p>谁说的</p><p>老师:</p><blockquote><p>说,小红说:</p><blockquote><p>6点放学</p></blockquote></blockquote><p>内容超链接：内容给用户看。  [内容] (网址)</p><p><a href="http://www.baidu.com/">点击进入百度</a></p><p>直连链接： &lt;网址&gt;</p><p><a href="http://www.baidu.com/">http://www.baidu.com</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/60d9dae4741f7df4874da06a33cfe05a.png" alt="alt 淘宝logo" title="淘宝网"></p><p><code>const name=&quot;小花猪&quot;</code></p><p>function getage(age){<br>    return age<br>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getage</span>(<span class="params">age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tangtang.github.io/2022/08/08/%E4%BB%A3%E7%A0%81/%E4%BB%A3%E7%A0%81/"/>
      <url>/tangtang.github.io/2022/08/08/%E4%BB%A3%E7%A0%81/%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<hr><p>tilte:’代码’<br>date：’2022-08-08 22:32:00’</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法速成手册</title>
      <link href="/tangtang.github.io/2022/08/08/SQL%E8%AF%AD%E6%B3%95%E9%80%9F%E6%88%90%E6%89%8B%E5%86%8C/"/>
      <url>/tangtang.github.io/2022/08/08/SQL%E8%AF%AD%E6%B3%95%E9%80%9F%E6%88%90%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>前言<br>这几天又注意到了精选文档的一些撰写规范和建议，觉得应该把参考文章的地址进行说明，一个是尊重原创作者，一个是有可能给读者带来不一样的学习启发。<br>本人参考地址：<a href="https://mp.weixin.qq.com/s/kZmm9bZC6ucUtiGzcJksXw">https://mp.weixin.qq.com/s/kZmm9bZC6ucUtiGzcJksXw</a><br>原文参考地址：<a href="https://juejin.cn/post/6844903790571700231">https://juejin.cn/post/6844903790571700231</a><br>一、基本概念<br>数据库术语<br>数据库（database） - 保存有组织的数据的容器（通常是一个文件或一组文件）。<br>数据表（table） - 某种特定类型数据的结构化清单。<br>模式（schema） - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。<br>列（column） - 表中的一个字段。所有表都是由一个或多个列组成的。<br>行（row） - 表中的一个记录。<br>主键（primary key） - 一列（或一组列），其值能够唯一标识表中每一行。<br>SQL 语法<br>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL&#x2F;SQL、Transact-SQL 等。<br>SQL 语法结构</p><p>SQL 语法结构包括：<br>子句 - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）<br>表达式 - 可以产生任何标量值，或由列和行的数据库表<br>谓词 - 给需要评估的 SQL 三值逻辑（3VL）（true&#x2F;false&#x2F;unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。<br>查询 - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。<br>语句 - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。<br>SQL 语法要点<br>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。<br>例如：SELECT 与 select 、Select 是相同的。<br>多条 SQL 语句必须以分号（;）分隔。<br>处理 SQL 语句时，所有空格都被忽略。SQL 语句可以写成一行，也可以分写为多行。<br>– 一行 SQL 语句<br>UPDATE user SET username&#x3D;’robot’, password&#x3D;’robot’ WHERE username &#x3D; ‘root’;<br>– 多行 SQL 语句<br>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;<br>SQL 支持三种注释</p><h2 id="注释1"><a href="#注释1" class="headerlink" title="注释1"></a>注释1</h2><p>– 注释2<br>&#x2F;* 注释3 *&#x2F;<br>SQL 分类<br>数据定义语言（DDL）<br>数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。<br>DDL 的主要功能是定义数据库对象。<br>DDL 的核心指令是 CREATE、ALTER、DROP。<br>数据操纵语言（DML）<br>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。<br>DML 的主要功能是 访问数据，因此其语法都是以读写数据库为主。<br>DML 的核心指令是 INSERT、UPDATE、DELETE、SELECT。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查。<br>事务控制语言（TCL）<br>事务控制语言 (Transaction Control Language, TCL) 用于管理数据库中的事务。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。<br>TCL 的核心指令是 COMMIT、ROLLBACK。<br>数据控制语言（DCL）<br>数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。<br>DCL 的核心指令是 GRANT、REVOKE。<br>DCL 以控制用户的访问权限为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：CONNECT、SELECT、INSERT、UPDATE、DELETE、EXECUTE、USAGE、REFERENCES。<br>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。<br>（以下为 DML 语句用法）<br>二、增删改查<br>增删改查，又称为 CRUD，数据库基本操作中的基本操作。<br>插入数据<br>INSERT INTO 语句用于向表中插入新记录。<br>插入完整的行<br>INSERT INTO user<br>VALUES (10, ‘root’, ‘root’, ‘<a href="mailto:&#x78;&#x78;&#x78;&#120;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#109;">&#x78;&#x78;&#x78;&#120;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#109;</a>‘);<br>插入行的一部分<br>INSERT INTO user(username, password, email)<br>VALUES (‘admin’, ‘admin’, ‘<a href="mailto:&#120;&#x78;&#x78;&#120;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;">&#120;&#x78;&#x78;&#120;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;</a>‘);<br>插入查询出来的数据<br>INSERT INTO user(username)<br>SELECT name<br>FROM account;<br>更新数据<br>UPDATE 语句用于更新表中的记录。<br>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;<br>删除数据<br>概述<br>DELETE 语句用于删除表中的记录。<br>TRUNCATE TABLE 可以清空表，也就是删除所有行。<br>删除表中的指定数据<br>DELETE FROM user<br>WHERE username &#x3D; ‘robot’;<br>清空表中的数据<br>TRUNCATE TABLE user;<br>查询数据<br>概述<br>SELECT 语句用于从数据库中查询数据。<br>DISTINCT 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。<br>LIMIT 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。<br>ASC ：升序（默认）<br>DESC ：降序<br>查询单列<br>SELECT prod_name<br>FROM products;<br>查询多列<br>SELECT prod_id, prod_name, prod_price<br>FROM products;<br>查询所有列<br>ELECT *FROM products;<br>查询不同的值<br>SELECT DISTINCT<br>vend_id FROM products;<br>限制查询结果<br>– 返回前 5 行<br>SELECT * FROM mytable LIMIT 5;<br>SELECT * FROM mytable LIMIT 0, 5;<br>– 返回第 3 ~ 5 行<br>SELECT * FROM mytable LIMIT 2, 3;<br>三、子查询<br>概述<br>子查询是嵌套在较大查询中的 SQL 查询。子查询也称为内部查询或内部选择，而包含子查询的语句也称为外部查询或外部选择。<br>子查询可以嵌套在 SELECT，INSERT，UPDATE 或 DELETE 语句内或另一个子查询中。<br>子查询通常会在另一个 SELECT 语句的 WHERE 子句中添加。<br>您可以使用比较运算符，如 &gt;，&lt;，或 &#x3D;。比较运算符也可以是多行运算符，如 IN，ANY 或 ALL。<br>子查询必须被圆括号 () 括起来。<br>内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：</p><p>子查询的子查询<br>SELECT cust_name, cust_contact<br>FROM customers<br>WHERE cust_id IN (SELECT cust_id<br>                  FROM orders<br>                  WHERE order_num IN (SELECT order_num<br>                                      FROM orderitems<br>                                      WHERE prod_id &#x3D; ‘RGAN01’));<br>WHERE<br>WHERE 子句用于过滤记录，即缩小访问数据的范围。<br>WHERE 后跟一个返回 true 或 false 的条件。<br>WHERE 可以与 SELECT，UPDATE 和 DELETE 一起使用。<br>可以在 WHERE 子句中使用的操作符</p><p>SELECT 语句中的 WHERE 子句<br>SELECT * FROM Customers<br>WHERE cust_name &#x3D; ‘Kids Place’;<br>UPDATE 语句中的 WHERE 子句<br>UPDATE CustomersSET cust_name &#x3D; ‘Jack Jones’<br>WHERE cust_name &#x3D; ‘Kids Place’;<br>DELETE 语句中的 WHERE 子句<br>DELETE FROM Customers<br>WHERE cust_name &#x3D; ‘Kids Place’;<br>IN 和 BETWEEN<br>概述<br>IN 操作符在 WHERE 子句中使用，作用是在指定的几个特定值中任选一个值。<br>BETWEEN 操作符在 WHERE 子句中使用，作用是选取介于某个范围内的值。<br>IN 示例<br>SELECT *FROM products<br>WHERE vend_id IN (‘DLL01’, ‘BRS01’);<br>BETWEEN 示例<br>SELECT *FROM products<br>WHERE prod_price BETWEEN 3 AND 5;<br>AND、OR、NOT<br>概述<br>AND、OR、NOT 是用于对过滤条件的逻辑处理指令。<br>AND 优先级高于 OR，为了明确处理顺序，可以使用 ()。<br>AND 操作符表示左右条件都要满足。<br>OR 操作符表示左右条件满足任意一个即可。<br>NOT 操作符用于否定一个条件。<br>AND 示例<br>SELECT prod_id, prod_name, prod_price<br>FROM products<br>WHERE vend_id &#x3D; ‘DLL01’ AND prod_price &lt;&#x3D; 4;<br>OR 示例<br>SELECT prod_id, prod_name, prod_price<br>FROM products<br>WHERE vend_id &#x3D; ‘DLL01’ OR vend_id &#x3D; ‘BRS01’;<br>NOT 示例<br>SELECT *FROM products<br>WHERE prod_price NOT BETWEEN 3 AND 5;<br>LIKE<br>概述<br>LIKE 操作符在 WHERE 子句中使用，作用是确定字符串是否匹配模式。<br>只有字段是文本值时才使用 LIKE。<br>LIKE 支持两个通配符匹配选项：% 和 <em>。<br>不要滥用通配符，通配符位于开头处匹配会非常慢。<br>% 表示任何字符出现任意次数。<br>_ 表示任何字符出现一次。<br>% 示例<br>SELECT prod_id, prod_name, prod_price<br>FROM products<br>WHERE prod_name LIKE ‘%bean bag%’;<br>_ 示例<br>SELECT prod_id, prod_name, prod_price<br>FROM products<br>WHERE prod_name LIKE ‘</em>_ inch teddy bear’;<br>##四、连接和组合<br>连接（JOIN）<br>概述<br>如果一个 JOIN 至少有一个公共字段并且它们之间存在关系，则该 JOIN 可以在两个或多个表上工作。<br>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。<br>JOIN 保持基表（结构和数据）不变。<br>JOIN 有两种连接类型：内连接和外连接。<br>内连接又称等值连接，使用 INNER JOIN 关键字。在没有条件语句的情况下返回笛卡尔积。<br>自连接可以看成内连接的一种，只是连接的表是自身而已。<br>自然连接是把同名列通过 &#x3D; 测试连接起来的，同名列可以有多个。<br>内连接 vs 自然连接<br>内连接提供连接的列，而自然连接自动连接所有同名列。<br>外连接返回一个表中的所有行，并且仅返回来自次表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。<br>左外连接就是保留左表没有关联的行。<br>右外连接就是保留右表没有关联的行。<br>连接 vs 子查询<br>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>内连接（INNER JOIN）<br>SELECT vend_name, prod_name, prod_price<br>FROM vendors INNER JOIN products<br>ON vendors.vend_id &#x3D; products.vend_id;<br>自连接<br>SELECT c1.cust_id, c1.cust_name, c1.cust_contact<br>FROM customers c1, customers c2<br>WHERE c1.cust_name &#x3D; c2.cust_name<br>AND c2.cust_contact &#x3D; ‘Jim Jones’;<br>自然连接（NATURAL JOIN）<br>SELECT *<br>FROM Products<br>NATURAL JOIN Customers;<br>左连接（LEFT JOIN）<br>SELECT customers.cust_id, orders.order_num<br>FROM customers LEFT JOIN orders<br>ON customers.cust_id &#x3D; orders.cust_id;<br>右连接（RIGHT JOIN）<br>SELECT customers.cust_id, orders.order_num<br>FROM customers RIGHT JOIN orders<br>ON customers.cust_id &#x3D; orders.cust_id;<br>组合（UNION）<br>概述<br>UNION 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 UNION 中参与查询的提取行。<br>UNION 基本规则<br>所有查询的列数和列顺序必须相同。<br>每个查询中涉及表的列的数据类型必须相同或兼容。<br>通常返回的列名取自第一个查询。<br>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。<br>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。<br>应用场景<br>在一个查询中从不同的表返回结构数据。<br>对一个表执行多个查询，按一个查询返回数据。<br>组合查询<br>SELECT cust_name, cust_contact, cust_email<br>FROM customers<br>WHERE cust_state IN (‘IL’, ‘IN’, ‘MI’)<br>UNION<br>SELECT cust_name, cust_contact, cust_email<br>FROM customers<br>WHERE cust_name &#x3D; ‘Fun4All’;<br>JOIN vs UNION<br>JOIN 中连接表的列可能不同，但在 UNION 中，所有查询的列数和列顺序必须相同。<br>UNION 将查询之后的行放在一起（垂直放置），但 JOIN 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。<br>五、函数<br>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。<br>文本处理<br>图示</p><p>其中， SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。<br>SELECT *<br>FROM mytable<br>WHERE SOUNDEX(col1) &#x3D; SOUNDEX(‘apple’)<br>日期和时间处理<br>日期格式：YYYY-MM-DD<br>时间格式：HH:MM:SS<br>图示</p><p>代码示例：<br>mysql&gt; SELECT NOW();<br>2018-4-14 20:25:11<br>数值处理<br>图示</p><p>汇总<br>图示</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。<br>SELECT AVG(DISTINCT col1) AS avg_col<br>FROM mytable<br>六、排序和分组<br>ORDER BY<br>ORDER BY 用于对结果集进行排序。<br>ASC ：升序（默认）<br>DESC ：降序<br>可以按多个列进行排序，并且为每个列指定不同的排序方式<br>指定多个列的排序方向<br>SELECT * FROM productsORDER BY prod_price DESC, prod_name ASC;<br>GROUP BY<br>概述<br>GROUP BY 子句将记录分组到汇总行中。<br>GROUP BY 为每个组返回一个记录。<br>GROUP BY 通常还涉及聚合：COUNT，MAX，SUM，AVG 等。<br>GROUP BY 可以按一列或多列进行分组。<br>GROUP BY 按分组字段进行排序后，ORDER BY 可以以汇总字段来进行排序。<br>分组<br>SELECT cust_name, COUNT(cust_address) AS addr_num<br>FROM Customers GROUP BY cust_name;<br>分组后排序<br>SELECT cust_name, COUNT(cust_address) AS addr_num<br>FROM Customers GROUP BY cust_name<br>ORDER BY cust_name DESC;<br>HAVING<br>概述<br>HAVING 用于对汇总的 GROUP BY 结果进行过滤。<br>HAVING 要求存在一个 GROUP BY 子句。<br>WHERE 和 HAVING 可以在相同的查询中。<br>HAVING vs WHERE<br>WHERE 和 HAVING 都是用于过滤。<br>HAVING 适用于汇总的组记录；而 WHERE 适用于单个记录。<br>使用 WHERE 和 HAVING 过滤数据<br>SELECT cust_name, COUNT(<em>) AS num<br>FROM Customers<br>WHERE cust_email IS NOT NULL<br>GROUP BY cust_name<br>HAVING COUNT(</em>) &gt;&#x3D; 1;<br>（以下为 DDL 语句用法）<br>##七、数据定义<br>DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。<br>数据库（DATABASE）<br>创建数据库<br>CREATE DATABASE test;<br>删除数据库<br>DROP DATABASE test;<br>选择数据库<br>USE test;<br>数据表（TABLE）<br>创建数据表<br>普通创建<br>CREATE TABLE user (<br>id int(10) unsigned NOT NULL COMMENT ‘Id’,<br>username varchar(64) NOT NULL DEFAULT ‘default’ COMMENT ‘用户名’,<br>password varchar(64) NOT NULL DEFAULT ‘default’ COMMENT ‘密码’,<br>email varchar(64) NOT NULL DEFAULT ‘default’ COMMENT ‘邮箱’<br>) COMMENT&#x3D;’用户表’;<br>根据已有的表创建新表<br>CREATE TABLE vip_user AS<br>SELECT * FROM user;<br>删除数据表<br>DROP TABLE user;<br>修改数据表<br>添加列<br>ALTER TABLE user<br>ADD age int(3);<br>删除列<br>ALTER TABLE user<br>DROP COLUMN age;<br>修改列<br>ALTER TABLE <code>user</code><br>MODIFY COLUMN age tinyint;<br>添加主键<br>ALTER TABLE user<br>ADD PRIMARY KEY (id);<br>删除主键<br>ALTER TABLE user<br>DROP PRIMARY KEY;<br>视图（VIEW）<br>定义<br>视图是基于 SQL 语句的结果集的可视化的表。<br>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。<br>作用<br>简化复杂的 SQL 操作，比如复杂的联结；<br>只使用实际表的一部分数据；<br>通过只给用户访问视图的权限，保证数据的安全性；<br>更改数据格式和表示。<br>创建视图<br>CREATE VIEW top_10_user_view ASSELECT id, usernameFROM userWHERE id &lt; 10;<br>删除视图<br>DROP VIEW top_10_user_view;<br>索引（INDEX）<br>作用<br>通过索引可以更加快速高效地查询数据。<br>用户无法看到索引，它们只能被用来加速查询。<br>注意<br>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。<br>唯一索引<br>唯一索引表明此索引的每一个索引值只对应唯一的数据记录。<br>创建索引<br>CREATE INDEX user_indexON user (id);<br>创建唯一索引<br>CREATE UNIQUE INDEX user_indexON user (id);<br>删除索引<br>ALTER TABLE userDROP INDEX user_index;<br>约束<br>SQL 约束用于规定表中的数据规则。<br>概述<br>如果存在违反约束的数据行为，行为会被约束终止。<br>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。<br>约束类型<br>NOT NULL - 指示某列不能存储 NULL 值。<br>UNIQUE - 保证某列的每行必须有唯一的值。<br>PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。<br>FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。<br>CHECK - 保证列中的值符合指定的条件。<br>DEFAULT - 规定没有给列赋值时的默认值。<br>创建表时使用约束条件：<br>CREATE TABLE Users (<br>Id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT ‘自增Id’,<br>Username VARCHAR(64) NOT NULL UNIQUE DEFAULT ‘default’ COMMENT ‘用户名’,<br>Password VARCHAR(64) NOT NULL DEFAULT ‘default’ COMMENT ‘密码’,<br>Email VARCHAR(64) NOT NULL DEFAULT ‘default’ COMMENT ‘邮箱地址’,<br>Enabled TINYINT(4) DEFAULT NULL COMMENT ‘是否有效’,<br>PRIMARY KEY (Id)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;’用户表’;<br>（以下为 TCL 语句用法）<br>八、事务处理<br>概述<br>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。<br>MySQL 默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。<br>通过 set autocommit&#x3D;0 可以取消自动提交，直到 set autocommit&#x3D;1 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。<br>指令<br>START TRANSACTION - 指令用于标记事务的起始点。<br>SAVEPOINT - 指令用于创建保留点。<br>ROLLBACK TO - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 START TRANSACTION 语句处。<br>COMMIT - 提交事务。<br>– 开始事务<br>START TRANSACTION;<br>– 插入操作<br>AINSERT INTO <code>user</code><br>VALUES (1, ‘root1’, ‘root1’, ‘<a href="mailto:&#x78;&#x78;&#120;&#x78;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;">&#x78;&#x78;&#120;&#x78;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a>‘);<br>– 创建保留点 updateA<br>SAVEPOINT updateA;<br>– 插入操作 B<br>INSERT INTO <code>user</code>VALUES (2, ‘root2’, ‘root2’, ‘<a href="mailto:&#x78;&#120;&#x78;&#120;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#x78;&#120;&#x78;&#120;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a>‘);<br>– 回滚到保留点 updateA<br>ROLLBACK TO updateA;<br>– 提交事务，只有操作 A 生效<br>COMMIT;<br>（以下为 DCL 语句用法）<br>九、权限控制<br>概述<br>GRANT 和 REVOKE 可在几个层次上控制访问权限：<br>整个服务器，使用 GRANT ALL 和 REVOKE ALL；<br>整个数据库，使用 ON database.*；<br>特定的表，使用 ON database.table；<br>特定的列；<br>特定的存储过程。<br>新创建的账户没有任何权限。<br>账户用 username@host 的形式定义，username@% 使用的是默认主机名。<br>MySQL 的账户信息保存在 mysql 这个数据库中。<br>USE mysql;SELECT user FROM user;复制代码<br>创建账户<br>CREATE USER myuser IDENTIFIED BY ‘mypassword’;<br>修改账户名<br>UPDATE user SET user&#x3D;’newuser’ WHERE user&#x3D;’myuser’;<br>FLUSH PRIVILEGES;<br>删除账户<br>DROP USER myuser;<br>查看权限<br>SHOW GRANTS FOR myuser;<br>授予权限<br>GRANT SELECT, INSERT ON *.* TO myuser;<br>删除权限<br>REVOKE SELECT, INSERT ON *.* FROM myuser;<br>更改密码<br>SET PASSWORD FOR myuser &#x3D; ‘mypass’;<br>十、存储过程<br>概述<br>存储过程可以看成是对一系列 SQL 操作的批处理；<br>使用存储过程的好处<br>代码封装，保证了一定的安全性；<br>代码复用；<br>由于是预先编译，因此具有很高的性能。<br>创建存储过程<br>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。<br>包含 in、out 和 inout 三种参数。<br>给变量赋值都需要用 select into 语句。<br>每次只能给一个变量赋值，不支持集合的操作。<br>创建存储过程<br>DROP PROCEDURE IF EXISTS <code>proc_adder</code>;<br>DELIMITER ;;<br>CREATE DEFINER&#x3D;<code>root</code>@<code>localhost</code> PROCEDURE <code>proc_adder</code>(IN a int, IN b int, OUT sum int)<br>BEGIN<br>    DECLARE c int;<br>    if a is null then set a &#x3D; 0;<br>    end if;<br>    if b is null then set b &#x3D; 0;<br>    end if;<br>    set sum  &#x3D; a + b;<br>END<br>;;<br>DELIMITER ;<br>使用存储过程<br>set @b&#x3D;5;<br>call proc_adder(2,@b,@s);<br>select @s as sum;<br>十一、游标<br>概述<br>游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。<br>在存储过程中使用游标可以对一个结果集进行移动遍历。<br>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。<br>使用游标的四个步骤：<br>声明游标，这个过程没有实际检索出数据；<br>打开游标；<br>取出数据；<br>关闭游标；<br>SQL语句示例：<br>DELIMITER $<br>CREATE  PROCEDURE getTotal()<br>BEGIN<br>    DECLARE total INT;<br>    – 创建接收游标数据的变量<br>    DECLARE sid INT;<br>    DECLARE sname VARCHAR(10);<br>    – 创建总数变量<br>    DECLARE sage INT;<br>    – 创建结束标志变量<br>    DECLARE done INT DEFAULT false;<br>    – 创建游标<br>    DECLARE cur CURSOR FOR SELECT id,name,age from cursor_table where age&gt;30;<br>    – 指定游标循环结束时的返回值<br>    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done &#x3D; true;<br>    SET total &#x3D; 0;<br>    OPEN cur;<br>    FETCH cur INTO sid, sname, sage;<br>    WHILE(NOT done)<br>    DO<br>        SET total &#x3D; total + 1;<br>        FETCH cur INTO sid, sname, sage;<br>    END WHILE;<br>    CLOSE cur;<br>    SELECT total;END $DELIMITER ;<br>– 调用存储过程<br>call getTotal();<br>十二、触发器<br>概述<br>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。<br>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。<br>MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。<br>BEGIN 和 END<br>当触发器的触发条件满足时，将会执行 BEGIN 和 END 之间的触发器执行动作。<br>🔔 注意：<br>在 MySQL 中，分号 ; 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。<br>这时就会用到 DELIMITER 命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：DELIMITER new_delemiter。new_delemiter 可以设为 1 个或多个长度的符号，默认的是分号 ;，我们可以把它修改为其他符号，如 $ - DELIMITER $ 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 $，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。<br>NEW 和 OLD<br>MySQL 中定义了 NEW 和 OLD 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。<br>在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据；<br>在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据；<br>在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据；<br>使用方法： NEW.columnName （columnName 为相应数据表某一列名）<br>创建触发器<br>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。<br>CREATE TRIGGER 指令用于创建触发器。<br>语法：<br>CREATE TRIGGER trigger_name<br>trigger_time<br>trigger_event<br>ON table_name<br>FOR EACH ROW<br>BEGIN<br>  trigger_statements<br>END;<br>说明：<br>trigger_name：触发器名<br>trigger_time: 触发器的触发时机。取值为 BEFORE 或 AFTER。<br>trigger_event: 触发器的监听事件。取值为 INSERT、UPDATE 或 DELETE。<br>table_name: 触发器的监听目标。指定在哪张表上建立触发器。<br>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。<br>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 ; 来结尾。<br>示例：<br>DELIM ITER $<br>CREATE TRIGGER <code>trigger_insert_user</code><br>AFTER INSERT ON <code>user</code><br>FOR EACH ROW<br>BEGIN<br>    INSERT INTO <code>user_history</code>(user_id, operate_type, operate_time)<br>    VALUES (NEW.id, ‘add a user’,  now());<br>END $<br>DELIMITER ;<br>查看触发器<br>SHOW TRIGGERS;<br>删除触发器<br>DROP TRIGGER IF EXISTS trigger_insert_user;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>北风丶初见</title>
      <link href="/tangtang.github.io/2022/08/08/%E2%80%98%E5%8C%97%E9%A3%8E%E4%B8%B6%E5%88%9D%E8%A7%81/"/>
      <url>/tangtang.github.io/2022/08/08/%E2%80%98%E5%8C%97%E9%A3%8E%E4%B8%B6%E5%88%9D%E8%A7%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
